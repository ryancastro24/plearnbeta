// Prisma schema for MySQL with UUIDs

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid()) @db.VarChar(36)
  idNumber          String              @unique
  name              String
  email             String              @unique
  gender            String
  age               Int
  yearLevel         Int?
  role              String
  hashedPassword    String
  points            Int?                @default(0)
  level             Float               @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  courseId          String?             @db.VarChar(36)
  course            Course?             @relation(fields: [courseId], references: [id])
  subjects          Subject[]           @relation("user_subject")
  sections          Section[]           @relation("user_section")
  items             Item[]              @relation("user_item")
  UserPurchasedItem UserPurchasedItem[]
  DoneActivity      DoneActivity[]
  notes             Note[]
  Announcement      Announcement[]
}

model Course {
  id        String   @id @default(uuid())
  acronym   String
  name      String   @unique
  students  User[]
  collegeId String   @db.VarChar(36)
  college   College  @relation(fields: [collegeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model College {
  id        String   @id @default(uuid())
  acronym   String
  name      String   @unique
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id           String         @id @default(uuid())
  title        String         @unique
  type         String
  isEditable   Boolean        @default(true)
  isDone       Boolean        @default(false)
  score        Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  subjectId    String?        @db.VarChar(36)
  subject      Subject?       @relation(fields: [subjectId], references: [id])
  questions    Question[]     @relation("question_activity")
  DoneActivity DoneActivity[]
}

model DoneActivity {
  id         String   @id @default(uuid())
  activityId String   @db.VarChar(36)
  activity   Activity @relation(fields: [activityId], references: [id])
  userId     String   @db.VarChar(36)
  user       User     @relation(fields: [userId], references: [id])
  isDone     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Question {
  id           String     @id @default(uuid())
  questionText String
  questionType String     @default("Multiple Choice")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  choices      Choice[] // Define a one-to-many relationship with choices
  activities   Activity[] @relation("question_activity")
}

model Choice {
  id              String    @id @default(uuid())
  isCorrectChoice Boolean
  choiceText      String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  question        Question? @relation(fields: [questionId], references: [id])
  questionId      String    @db.VarChar(36)
}

model Lesson {
  id        String   @id @default(uuid())
  title     String   @unique
  type      String
  Subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId String?  @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id           String         @id @default(uuid())
  subjectCode  String
  title        String
  realm        String?
  students     User[]         @relation("user_subject")
  type         String
  activityId   Activity[]
  lessonId     Lesson[]
  notes        Note[]
  UploadedFile UploadedFile[]
  Announcement Announcement[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Section      Section[]
}

model Section {
  id        String   @id @default(uuid())
  name      String
  shedule   String
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]   @relation("user_section")
}

model Item {
  id                String              @id @default(uuid())
  name              String
  description       String
  price             Int
  image             String
  numberOfpurchase  Int?
  purchased         Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  User              User[]              @relation("user_item")
  UserPurchasedItem UserPurchasedItem[]
}

model UserPurchasedItem {
  id        String   @id @default(uuid())
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    String   @db.VarChar(36)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("_userId") @db.VarChar(36)
  purchased Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.VarChar(36)
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String   @db.VarChar(36)
}

model UploadedFile {
  id        String   @id @default(uuid())
  title     String
  filename  String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String   @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id        String   @id @default(uuid()) @db.VarChar(36)
  content   String
  userId    String   @db.VarChar(36)
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String   @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}
